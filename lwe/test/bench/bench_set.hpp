// Env
// - Version:  C++17
// - Arch:     x64
// - CPU:      Ryzen R7-3700x
// - RAM:      DDR4-3200 / 8GB x 2
// - OS:       Windows 11
// - Compiler: MSVC 2022 v143
// - Option:   Release (/O2)

// Output
// - Hash function: FNV1a
// - Load factor:   2.0
/*
TIME:        2025-07-13 00:51:08 UTC+09:00
HASHING:     FNV1a
RANDOM:      Xoshiro256++ (SEED: TIME)
LOAD FACTOR: 2

HASH INSERT / ITERATE / CLEAR TEST
================================================================================
ELEMENT SIZE: 8
ELEMENT COUNT: 10000000

================================================================================
STD INSERT (INITIAL) COUNT: 10000000
--------------------------------------------------------------------------------
  1: 17.343 SEC
  2: 17.166 SEC
  3: 16.994 SEC
--------------------------------------------------------------------------------
AVG: 17.168 SEC
================================================================================
LWE INSERT (INITIAL) COUNT: 10000000
--------------------------------------------------------------------------------
  1: 7.453 SEC
  2: 7.361 SEC
  3: 7.565 SEC
--------------------------------------------------------------------------------
AVG: 7.460 SEC
================================================================================
RESULT: 56.55% FASTER
================================================================================

================================================================================
STD INSERT (RESERVED) COUNT: 10000000
--------------------------------------------------------------------------------
  1: 9.333 SEC
  2: 9.487 SEC
  3: 9.538 SEC
--------------------------------------------------------------------------------
AVG: 9.453 SEC
================================================================================
LWE INSERT (RESERVED) COUNT: 10000000
--------------------------------------------------------------------------------
  1: 2.060 SEC
  2: 2.329 SEC
  3: 3.209 SEC
--------------------------------------------------------------------------------
AVG: 2.533 SEC
================================================================================
RESULT: 73.21% FASTER
================================================================================

================================================================================
STD FIND LOOP: 1000000
--------------------------------------------------------------------------------
  1: 0.435 SEC
  2: 0.430 SEC
  3: 0.435 SEC
--------------------------------------------------------------------------------
AVG: 0.433 SEC
================================================================================
LWE FIND LOOP: 1000000
--------------------------------------------------------------------------------
  1: 0.137 SEC
  2: 0.136 SEC
  3: 0.138 SEC
--------------------------------------------------------------------------------
AVG: 0.137 SEC
================================================================================
RESULT: 68.38% FASTER
================================================================================

================================================================================
STD READ 0 ~ 10000000
--------------------------------------------------------------------------------
  1: 0.930 SEC
  2: 0.909 SEC
  3: 0.970 SEC
--------------------------------------------------------------------------------
AVG: 0.936 SEC
================================================================================
LWE READ 0 ~ 10000000
--------------------------------------------------------------------------------
  1: 0.558 SEC
  2: 0.579 SEC
  3: 0.580 SEC
--------------------------------------------------------------------------------
AVG: 0.572 SEC
================================================================================
RESULT: 38.88% FASTER
================================================================================

================================================================================
STD CLEAR
--------------------------------------------------------------------------------
  1: 5.052 SEC
  2: 5.306 SEC
  3: 5.211 SEC
--------------------------------------------------------------------------------
AVG: 5.190 SEC
================================================================================
LWE CLEAR
--------------------------------------------------------------------------------
  1: 2.174 SEC
  2: 2.288 SEC
  3: 1.988 SEC
--------------------------------------------------------------------------------
AVG: 2.150 SEC
================================================================================
RESULT: 58.57% FASTER
================================================================================


ELEMENT SIZE: 512
ELEMENT COUNT: 1000000

================================================================================
STD INSERT (INITIAL) COUNT: 1000000
--------------------------------------------------------------------------------
  1: 6.266 SEC
  2: 6.283 SEC
  3: 6.237 SEC
--------------------------------------------------------------------------------
AVG: 6.262 SEC
================================================================================
LWE INSERT (INITIAL) COUNT: 1000000
--------------------------------------------------------------------------------
  1: 3.354 SEC
  2: 3.487 SEC
  3: 3.538 SEC
--------------------------------------------------------------------------------
AVG: 3.460 SEC
================================================================================
RESULT: 44.75% FASTER
================================================================================

================================================================================
STD INSERT (RESERVED) COUNT: 1000000
--------------------------------------------------------------------------------
  1: 3.277 SEC
  2: 3.227 SEC
  3: 3.236 SEC
--------------------------------------------------------------------------------
AVG: 3.247 SEC
================================================================================
LWE INSERT (RESERVED) COUNT: 1000000
--------------------------------------------------------------------------------
  1: 2.576 SEC
  2: 2.559 SEC
  3: 2.845 SEC
--------------------------------------------------------------------------------
AVG: 2.660 SEC
================================================================================
RESULT: 18.07% FASTER
================================================================================

================================================================================
STD FIND LOOP: 1000000
--------------------------------------------------------------------------------
  1: 2.773 SEC
  2: 2.727 SEC
  3: 2.722 SEC
--------------------------------------------------------------------------------
AVG: 2.741 SEC
================================================================================
LWE FIND LOOP: 1000000
--------------------------------------------------------------------------------
  1: 2.398 SEC
  2: 2.394 SEC
  3: 2.395 SEC
--------------------------------------------------------------------------------
AVG: 2.396 SEC
================================================================================
RESULT: 12.59% FASTER
================================================================================

================================================================================
STD READ 0 ~ 10000000
--------------------------------------------------------------------------------
  1: 1.134 SEC
  2: 1.135 SEC
  3: 1.131 SEC
--------------------------------------------------------------------------------
AVG: 1.133 SEC
================================================================================
LWE READ 0 ~ 10000000
--------------------------------------------------------------------------------
  1: 0.962 SEC
  2: 0.975 SEC
  3: 0.968 SEC
--------------------------------------------------------------------------------
AVG: 0.968 SEC
================================================================================
RESULT: 14.56% FASTER
================================================================================

================================================================================
STD CLEAR
--------------------------------------------------------------------------------
  1: 2.826 SEC
  2: 2.777 SEC
  3: 2.821 SEC
--------------------------------------------------------------------------------
AVG: 2.808 SEC
================================================================================
LWE CLEAR
--------------------------------------------------------------------------------
  1: 2.575 SEC
  2: 2.555 SEC
  3: 2.526 SEC
--------------------------------------------------------------------------------
AVG: 2.552 SEC
================================================================================
RESULT: 9.12% FASTER
================================================================================


ELEMENT SIZE: 4096
ELEMENT COUNT: 100000

================================================================================
STD INSERT (INITIAL) COUNT: 100000
--------------------------------------------------------------------------------
  1: 4.345 SEC
  2: 4.328 SEC
  3: 4.326 SEC
--------------------------------------------------------------------------------
AVG: 4.333 SEC
================================================================================
LWE INSERT (INITIAL) COUNT: 100000
--------------------------------------------------------------------------------
  1: 2.173 SEC
  2: 2.152 SEC
  3: 2.193 SEC
--------------------------------------------------------------------------------
AVG: 2.173 SEC
================================================================================
RESULT: 49.86% FASTER
================================================================================

================================================================================
STD INSERT (RESERVED) COUNT: 100000
--------------------------------------------------------------------------------
  1: 1.892 SEC
  2: 1.888 SEC
  3: 1.899 SEC
--------------------------------------------------------------------------------
AVG: 1.893 SEC
================================================================================
LWE INSERT (RESERVED) COUNT: 100000
--------------------------------------------------------------------------------
  1: 1.828 SEC
  2: 1.826 SEC
  3: 2.048 SEC
--------------------------------------------------------------------------------
AVG: 1.901 SEC
================================================================================
RESULT: 0.41% SLOWER
================================================================================

================================================================================
STD FIND LOOP: 1000000
--------------------------------------------------------------------------------
  1: 18.669 SEC
  2: 18.708 SEC
  3: 18.684 SEC
--------------------------------------------------------------------------------
AVG: 18.687 SEC
================================================================================
LWE FIND LOOP: 1000000
--------------------------------------------------------------------------------
  1: 18.404 SEC
  2: 18.361 SEC
  3: 18.348 SEC
--------------------------------------------------------------------------------
AVG: 18.371 SEC
================================================================================
RESULT: 1.69% FASTER
================================================================================

================================================================================
STD READ 0 ~ 10000000
--------------------------------------------------------------------------------
  1: 1.150 SEC
  2: 1.199 SEC
  3: 1.236 SEC
--------------------------------------------------------------------------------
AVG: 1.195 SEC
================================================================================
LWE READ 0 ~ 10000000
--------------------------------------------------------------------------------
  1: 1.332 SEC
  2: 1.232 SEC
  3: 1.238 SEC
--------------------------------------------------------------------------------
AVG: 1.267 SEC
================================================================================
RESULT: 6.05% SLOWER
================================================================================

================================================================================
STD CLEAR
--------------------------------------------------------------------------------
  1: 1.848 SEC
  2: 1.849 SEC
  3: 1.859 SEC
--------------------------------------------------------------------------------
AVG: 1.852 SEC
================================================================================
LWE CLEAR
--------------------------------------------------------------------------------
  1: 1.833 SEC
  2: 1.841 SEC
  3: 1.838 SEC
--------------------------------------------------------------------------------
AVG: 1.837 SEC
================================================================================
RESULT: 0.79% FASTER
================================================================================



HASH COLLISION TEST
NOTE: PLEASE DO NOT INCLUDE "hash.hpp" BEFORE THIS FILE

================================================================================
ELEMENT SIZE: 8
SAME DATA INSERT LOOP: 10000000

================================================================================
STD INSERT SAME VALUE LOOP: 10000000
--------------------------------------------------------------------------------
  1: 3.456 SEC
  2: 3.372 SEC
  3: 3.405 SEC
--------------------------------------------------------------------------------
AVG: 3.411 SEC
================================================================================
LWE INSERT SAME VALUE LOOP: 10000000
--------------------------------------------------------------------------------
  1: 0.451 SEC
  2: 0.460 SEC
  3: 0.453 SEC
--------------------------------------------------------------------------------
AVG: 0.455 SEC
================================================================================
RESULT: 86.67% FASTER
================================================================================


std count: 1
lwe count: 1
ELEMENT SIZE: 512
SAME DATA INSERT LOOP: 10000000

================================================================================
STD INSERT SAME VALUE LOOP: 10000000
--------------------------------------------------------------------------------
  1: 3.687 SEC
  2: 3.685 SEC
  3: 3.676 SEC
--------------------------------------------------------------------------------
AVG: 3.683 SEC
================================================================================
LWE INSERT SAME VALUE LOOP: 10000000
--------------------------------------------------------------------------------
  1: 0.781 SEC
  2: 0.783 SEC
  3: 0.781 SEC
--------------------------------------------------------------------------------
AVG: 0.782 SEC
================================================================================
RESULT: 78.77% FASTER
================================================================================


std count: 1
lwe count: 1
ELEMENT SIZE: 4096
SAME DATA INSERT LOOP: 10000000

================================================================================
STD INSERT SAME VALUE LOOP: 10000000
--------------------------------------------------------------------------------
  1: 5.340 SEC
  2: 5.352 SEC
  3: 5.360 SEC
--------------------------------------------------------------------------------
AVG: 5.351 SEC
================================================================================
LWE INSERT SAME VALUE LOOP: 10000000
--------------------------------------------------------------------------------
  1: 2.541 SEC
  2: 2.549 SEC
  3: 2.548 SEC
--------------------------------------------------------------------------------
AVG: 2.546 SEC
================================================================================
RESULT: 52.42% FASTER
================================================================================


std count: 1
lwe count: 1
*/

/**************************************************************************************************
 * SETTING
 **************************************************************************************************/
#include <unordered_set>
#include "internal/bench.hpp"

static constexpr float LOAD_FACTOR = 2.f; // extream case

char table[255]; // dummy, for fill buffer

template<size_t N> struct Data {
    static const size_t BUFFER_SIZE = N - sizeof(int);

    Data(int n = 0): n(n) { memset(buffer, table[uint8_t(n & 0xFF)], BUFFER_SIZE); } // dummy set
    operator int() { return n; }
    bool operator==(const Data& in) const { return n == in.n && !memcmp(buffer, in.buffer, BUFFER_SIZE); }
    bool operator!=(const Data& in) const { return !(*this == in); }

    int  n;
    char buffer[BUFFER_SIZE] = { 0 };
};

template<size_t N> struct InvalidData: Data<N> {
    using Data<N>::Data;
};

// my hash forward declaration
LWE_BEGIN
namespace util {
template<typename T> hash_t hashof(const T&);
}
LWE_END

// hash override -> FNV1a
template<size_t N> struct std::hash<Data<N>> {
    size_t operator()(const Data<N>& in) const { return LWE::util::hashof(in); }
};

// invalid hash override
LWE_BEGIN
namespace util {
template<size_t N> hash_t hashof(const InvalidData<N>&) {
    return 100;
}
} // namespace util
LWE_END

// use same hash function
template<size_t N> struct std::hash<InvalidData<N>> {
    size_t operator()(const InvalidData<N>& in) const { return LWE::util::hashof(in); }
};

/**************************************************************************************************
 * include
 **************************************************************************************************/
#include "../../util/hash.hpp"
#include "../../stl/set.hpp"
#include "../../util/timer.hpp"
#include "../../util/random.hpp"

using namespace lwe::mem;
using namespace lwe::stl;

/**************************************************************************************************
 * main
 **************************************************************************************************/
template<size_t, int> void test_insert();
template<size_t, int> void test_collision();

int main() {
    // init
    for(int i = 0; i < 255; ++i) {
        table[i] = i;
    }
    Bench b;

    std::cout << "TIME:        " << std::string(lwe::util::Timer::system()) + " UTC+09:00\n";
    std::cout << "HASHING:     FNV1a\n";
    std::cout << "RANDOM:      Xoshiro256++ (SEED: TIME)\n";
    std::cout << "LOAD FACTOR: " << LOAD_FACTOR << "\n";
    std::cout << std::endl;

    std::cout << "HASH INSERT / ITERATE / CLEAR TEST\n";
    b.line();

    test_insert<8, 10'000'000>();  // small size data
    test_insert<512, 1'000'000>(); // medium size data
    test_insert<4'096, 100'000>(); // large size data

    std::cout << std::endl;

    std::cout << "HASH COLLISION TEST\n";
    std::cout << "NOTE: PLEASE DO NOT INCLUDE \"hash.hpp\" BEFORE THIS FILE\n\n";
    // hash.hpp is included first -> invalid data hash not overload
    b.line();

    test_collision<8, 10'000'000>();     // small size data collision test
    test_collision<512, 10'000'000>();   // small size data collision test
    test_collision<4'096, 10'000'000>(); // small size data collision test
}

/**************************************************************************************************
 * insert test code
 **************************************************************************************************/
template<size_t SIZE, int COUNT> void test_insert() {
    static constexpr int ITERATE = 10'000'000; // circulation
    static constexpr int FIND    = 1'000'000;    // find count

    float        sec = 0;
    float        stlsec;
    volatile int var = 0;

    using Type = Data<SIZE>;

    std::cout << "ELEMENT SIZE: " << sizeof(Type) << "\n";
    std::cout << "ELEMENT COUNT: " << COUNT << "\n";
    std::cout << std::endl;

    std::unordered_set<Type> stdset;
    LWE::stl::Set<Type>      lweset(LOAD_FACTOR);

    Bench bench, std_in, std_free, lwe_in, lwe_free;

    ///////////////////////////////////////////////////////////////////////////////
    // INSERT (INITIAL)
    ///////////////////////////////////////////////////////////////////////////////

    bench.loop([&]() {
        std::unordered_set<Type> temp;
        for(int i = 0; i < COUNT; ++i) temp.insert(i);
        volatile size_t size = temp.size(); // unoptimized
    });
    bench.output("STD INSERT (INITIAL) COUNT: ", COUNT);
    stlsec = bench.average();

    bench.loop([&]() {
        LWE::stl::Set<Type> temp(LOAD_FACTOR);
        for(int i = 0; i < COUNT; ++i) temp.push(i);
        volatile size_t size = temp.size(); // unoptimized
    });
    bench.output("LWE INSERT (INITIAL) COUNT: ", COUNT);
    bench.from(stlsec);

    ///////////////////////////////////////////////////////////////////////////////
    // WARM UP
    ///////////////////////////////////////////////////////////////////////////////

    for(int i = 0; i < COUNT; ++i) stdset.insert(i); // allocate
    for(int i = 0; i < COUNT; ++i) lweset.push(i);   // allocate
    stdset.clear();                                  // clear
    lweset.clear();                                  // clear

    // insert / clear loop 2 for average
    for(int i = 0; i < 2; ++i) {
        // std insert
        std_in.once([&]() {
            for(int i = 0; i < COUNT; ++i) stdset.insert(i);
        });
        // std remove
        std_free.once([&]() {
            for(int i = 0; i < COUNT; ++i) stdset.erase(i);
        });
        // lwe insert
        lwe_in.once([&]() {
            for(int i = 0; i < COUNT; ++i) lweset.push(i);
        });
        // lwe remove
        lwe_free.once([&]() {
            for(int i = 0; i < COUNT; ++i) lweset.pop(i);
        });
    }

    ///////////////////////////////////////////////////////////////////////////////
    // INSERT ONCE
    ///////////////////////////////////////////////////////////////////////////////

    std_in.once([&]() {
        for(int i = 0; i < COUNT; ++i) stdset.insert(i);
    });
    std_in.output("STD INSERT (RESERVED) COUNT: ", COUNT);
    stlsec = std_in.average();

    lwe_in.once([&]() {
        for(int i = 0; i < COUNT; ++i) lweset.push(i);
    });
    lwe_in.output("LWE INSERT (RESERVED) COUNT: ", COUNT);
    lwe_in.from(stlsec);

    ///////////////////////////////////////////////////////////////////////////////
    // find
    ///////////////////////////////////////////////////////////////////////////////

    var = 0;
    bench.loop([&]() {
        for(int i = 0; i < FIND; ++i) {
            int value  = lwe::util::Random::generate(0, COUNT - 1); // ignore caching
            var       += stdset.find(value)->n;
        }
    });
    bench.output("STD FIND LOOP: ", FIND);
    stlsec = bench.average();

    var = 0;
    bench.loop([&]() {
        for(int i = 0; i < FIND; ++i) {
            int value  = lwe::util::Random::generate(0, COUNT - 1); // ignore caching
            var       += lweset.find(value)->n;
        }
    });
    bench.output("LWE FIND LOOP: ", FIND);
    bench.from(stlsec);

    ///////////////////////////////////////////////////////////////////////////////
    // ITERATE
    ///////////////////////////////////////////////////////////////////////////////

    var = 0;
    bench.loop([&]() {
        auto       itr = stdset.begin();
        const auto end = stdset.end();
        for(int i = 0; i < ITERATE; ++i) {
            var += itr->n;
            if((++itr) == end) itr = stdset.begin();
        }
    });
    bench.output("STD READ 0 ~ ", ITERATE);
    stlsec = bench.average();

    var = 0;
    bench.loop([&]() {
        auto       itr = lweset.begin();
        const auto end = lweset.end();
        for(int i = 0; i < ITERATE; ++i) {
            var += itr->n;
            if((++itr) == end) itr = lweset.begin();
        }
    });
    bench.output("LWE READ 0 ~ ", ITERATE);
    bench.from(stlsec);

    ///////////////////////////////////////////////////////////////////////////
    // clear once
    ///////////////////////////////////////////////////////////////////////////

    std_free.once([&]() {
        for(int i = 0; i < COUNT; ++i) stdset.erase(i);
    });
    std_free.output("STD CLEAR");
    stlsec = std_free.average();

    lwe_free.once([&]() {
        for(int i = 0; i < COUNT; ++i) lweset.pop(i);
    });
    lwe_free.output("LWE CLEAR");
    lwe_free.from(stlsec);

    std::cout << std::endl;
}

/**************************************************************************************************
 * hash collision test code
 **************************************************************************************************/
template<size_t SIZE, int COUNT> void test_collision() {
    float        sec = 0;
    volatile int var = 0;

    using Type = InvalidData<SIZE>;

    std::cout << "ELEMENT SIZE: " << sizeof(Type) << "\n";
    std::cout << "SAME DATA INSERT LOOP: " << COUNT << "\n";
    std::cout << std::endl;


    std::unordered_set<Type> stdset;
    LWE::stl::Set<Type>      lweset(LOAD_FACTOR);

    Bench bench;

    float stlsec;

    stdset.insert(Type{ 100 }); // insert dummy
    lweset.insert(Type{ 100 }); // insert dummy

    bench.loop([&]() {
        for(int i = 0; i < COUNT; ++i) {
            stdset.insert(100); // same value
        }
    });
    bench.output("STD INSERT SAME VALUE LOOP: ", COUNT);
    stlsec = bench.average();

    bench.loop([&]() {
        for(int i = 0; i < COUNT; ++i) {
            lweset.push(100); // same value
        }
    });
    bench.output("LWE INSERT SAME VALUE LOOP: ", COUNT);
    bench.from(stlsec);

    std::cout << std::endl;

    std::cout << "std count: " << stdset.size() << "\n";
    std::cout << "lwe count: " << lweset.size() << "\n";
}
